/* 
 * Copyright 2016 Dmitry Avtonomov.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package umich.ms.batmass.gui.viewers.spectrum.actions;

import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import umich.ms.batmass.gui.core.components.util.textinput.DocumentFilters;
import umich.ms.datatypes.scancollection.IScanCollection;


/**
 *
 * @author Dmitry Avtonomov
 */
public class GoTo1DDialog extends javax.swing.JPanel {
    private IScanCollection scans;
    private DefaultComboBoxModel<String> rtTypeComboModel = new DefaultComboBoxModel<>(new String[] { "min", "sec" });

    /**
     * Creates new form GoTo1DDialog
     */
    public GoTo1DDialog() {
        initComponents();
    }
    
    public GoTo1DDialog(IScanCollection scans) {
        this();
        this.scans = scans;
        setAvailableRanges();
    }
    
    public void setDefaultValues(Integer scanNum, Double rt, Double scanMzWindowLower, Double scanMzWindowUpper) {
        // set default values for fields
        if (scanNum != null)
            this.getFieldScanNum().setText(String.format("%d", scanNum));
        if (rt != null)
            this.getFieldRt().setText(String.format("%.2f", rt));
        if (scanMzWindowLower != null)
            this.getFieldMzStart().setText(String.format("%.4f", scanMzWindowLower));
        if (scanMzWindowUpper != null)
            this.getFieldMzEnd().setText(String.format("%.4f", scanMzWindowUpper));
    }
    
    private void setAvailableRanges() {
        getFieldScanNumRange().setText(String.format("%d - %d", scans.getMapNum2scan().firstKey(), scans.getMapNum2scan().lastKey()));
        double rtMin = scans.getRtMin();
        double rtMax = scans.getRtMax();
        if ( ((String)comboBoxTimeUnits.getModel().getSelectedItem()).equals("min") ) {
            getFieldRtRange().setText(String.format("%.2f - %.2fm", rtMin, rtMax));
        } else {
            getFieldRtRange().setText(String.format("%.1f - %.1fs", rtMin*60d, rtMax*60d));
        }   
    }
    
    public Double getRtInMinutes() {
        String text = getFieldRt().getText();
        text = text.replaceAll("[,\\.]+", ".");
        if ( ((String)comboBoxTimeUnits.getModel().getSelectedItem()).equals("min") ) {
            return org.apache.commons.validator.routines.DoubleValidator.getInstance().validate(text, Locale.ROOT);
        } else {
            Double validate = org.apache.commons.validator.routines.DoubleValidator.getInstance().validate(text, Locale.ROOT);
            if (validate == null)
                return null;
            return validate/60d;
        } 
    }
    
    public Integer getScanNum() {
        String text = getFieldScanNum().getText();
        return org.apache.commons.validator.routines.IntegerValidator.getInstance().validate(text, Locale.ROOT);
    }
    
    public Double getMzStart() {
        return getValidatedDouble(getFieldMzStart());
    }
    
    public Double getMzEnd() {
        return getValidatedDouble(getFieldMzEnd());
    }
    
    private Double getValidatedDouble(JTextField field) {
        String text = field.getText();
        text = text.replaceAll("[,\\.]+", ".");
        return org.apache.commons.validator.routines.DoubleValidator.getInstance().validate(text, Locale.ROOT);
    }

    public JTextField getFieldMzEnd() {
        return fieldMzEnd;
    }

    public JTextField getFieldMzRange() {
        return fieldMzRange;
    }

    public JTextField getFieldMzStart() {
        return fieldMzStart;
    }

    public JTextField getFieldRt() {
        return fieldRt;
    }

    public JTextField getFieldRtRange() {
        return fieldRtRange;
    }

    public JTextField getFieldScanNum() {
        return fieldScanNum;
    }

    public JTextField getFieldScanNumRange() {
        return fieldScanNumRange;
    }

    public JComboBox<String> getComboBoxTimeUnits() {
        return comboBoxTimeUnits;
    }

    public DefaultComboBoxModel<String> getRtTypeComboModel() {
        return rtTypeComboModel;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblScan = new javax.swing.JLabel();
        fieldScanNum = new javax.swing.JTextField();
        fieldRt = new javax.swing.JTextField();
        lblRt = new javax.swing.JLabel();
        fieldMzStart = new javax.swing.JTextField();
        lblMzSeparator = new javax.swing.JLabel();
        fieldMzEnd = new javax.swing.JTextField();
        lblMz = new javax.swing.JLabel();
        fieldMzRange = new javax.swing.JTextField();
        fieldScanNumRange = new javax.swing.JTextField();
        comboBoxTimeUnits = new javax.swing.JComboBox<>();
        fieldRtRange = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(lblScan, org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.lblScan.text")); // NOI18N

        fieldScanNum.setDocument(DocumentFilters.getDigitsOnlyFilter());
        fieldScanNum.setText(org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.fieldScanNum.text")); // NOI18N
        fieldScanNum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldScanNumFocusGained(evt);
            }
        });

        fieldRt.setDocument(DocumentFilters.getDigitsAndDotCommaFilter());
        fieldRt.setText(org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.fieldRt.text")); // NOI18N
        fieldRt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldRtFocusGained(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblRt, org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.lblRt.text")); // NOI18N

        fieldMzStart.setDocument(DocumentFilters.getDigitsAndDotCommaFilter());
        fieldMzStart.setText(org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.fieldMzStart.text")); // NOI18N
        fieldMzStart.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldMzStartFocusGained(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblMzSeparator, org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.lblMzSeparator.text")); // NOI18N

        fieldMzEnd.setDocument(DocumentFilters.getDigitsAndDotCommaFilter());
        fieldMzEnd.setText(org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.fieldMzEnd.text")); // NOI18N
        fieldMzEnd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldMzEndFocusGained(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblMz, org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.lblMz.text")); // NOI18N

        fieldMzRange.setEditable(false);
        fieldMzRange.setText(org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.fieldMzRange.text")); // NOI18N
        fieldMzRange.setFocusable(false);
        fieldMzRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldMzRangeActionPerformed(evt);
            }
        });

        fieldScanNumRange.setEditable(false);
        fieldScanNumRange.setText(org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.fieldScanNumRange.text")); // NOI18N
        fieldScanNumRange.setFocusable(false);

        comboBoxTimeUnits.setModel(getRtTypeComboModel());
        comboBoxTimeUnits.setFocusable(false);
        comboBoxTimeUnits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTimeUnitsActionPerformed(evt);
            }
        });

        fieldRtRange.setEditable(false);
        fieldRtRange.setText(org.openide.util.NbBundle.getMessage(GoTo1DDialog.class, "GoTo1DDialog.fieldRtRange.text")); // NOI18N
        fieldRtRange.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblScan)
                    .addComponent(lblRt)
                    .addComponent(lblMz))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(fieldRt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(fieldMzStart, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMzSeparator)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldMzEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fieldScanNum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldMzRange)
                    .addComponent(fieldScanNumRange)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBoxTimeUnits, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldRtRange, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblScan)
                    .addComponent(fieldScanNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldScanNumRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldRt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRt)
                    .addComponent(comboBoxTimeUnits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldRtRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldMzStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMzSeparator)
                    .addComponent(fieldMzEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMz)
                    .addComponent(fieldMzRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fieldMzRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldMzRangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldMzRangeActionPerformed

    private void comboBoxTimeUnitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTimeUnitsActionPerformed
        setAvailableRanges();
    }//GEN-LAST:event_comboBoxTimeUnitsActionPerformed

    private void fieldScanNumFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldScanNumFocusGained
        fieldScanNum.selectAll();
    }//GEN-LAST:event_fieldScanNumFocusGained

    private void fieldRtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldRtFocusGained
        fieldRt.selectAll();
    }//GEN-LAST:event_fieldRtFocusGained

    private void fieldMzStartFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldMzStartFocusGained
        fieldMzStart.selectAll();
    }//GEN-LAST:event_fieldMzStartFocusGained

    private void fieldMzEndFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldMzEndFocusGained
        fieldMzEnd.selectAll();
    }//GEN-LAST:event_fieldMzEndFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboBoxTimeUnits;
    private javax.swing.JTextField fieldMzEnd;
    private javax.swing.JTextField fieldMzRange;
    private javax.swing.JTextField fieldMzStart;
    private javax.swing.JTextField fieldRt;
    private javax.swing.JTextField fieldRtRange;
    private javax.swing.JTextField fieldScanNum;
    private javax.swing.JTextField fieldScanNumRange;
    private javax.swing.JLabel lblMz;
    private javax.swing.JLabel lblMzSeparator;
    private javax.swing.JLabel lblRt;
    private javax.swing.JLabel lblScan;
    // End of variables declaration//GEN-END:variables
}
